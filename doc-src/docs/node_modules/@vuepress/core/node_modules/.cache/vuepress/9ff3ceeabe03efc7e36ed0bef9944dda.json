{"remainingRequest":"/home/cmiranda/Documentos/2020-21-DAW2-M12-BookFind/doc-src/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/cmiranda/Documentos/2020-21-DAW2-M12-BookFind/doc-src/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/cmiranda/Documentos/2020-21-DAW2-M12-BookFind/doc-src/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/cmiranda/Documentos/2020-21-DAW2-M12-BookFind/doc-src/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/cmiranda/Documentos/2020-21-DAW2-M12-BookFind/doc-src/docs/src/documentacion/README.md?vue&type=template&id=4ba17f5c&","dependencies":[{"path":"/home/cmiranda/Documentos/2020-21-DAW2-M12-BookFind/doc-src/docs/src/documentacion/README.md","mtime":1620742613855},{"path":"/home/cmiranda/Documentos/2020-21-DAW2-M12-BookFind/doc-src/docs/node_modules/cache-loader/dist/cjs.js","mtime":1620666673053},{"path":"/home/cmiranda/Documentos/2020-21-DAW2-M12-BookFind/doc-src/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1620666673641},{"path":"/home/cmiranda/Documentos/2020-21-DAW2-M12-BookFind/doc-src/docs/node_modules/cache-loader/dist/cjs.js","mtime":1620666673053},{"path":"/home/cmiranda/Documentos/2020-21-DAW2-M12-BookFind/doc-src/docs/node_modules/vue-loader/lib/index.js","mtime":1620666673641},{"path":"/home/cmiranda/Documentos/2020-21-DAW2-M12-BookFind/doc-src/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":1620666672961}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}